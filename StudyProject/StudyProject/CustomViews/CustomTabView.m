////  TopTapView.m//  CEODesktop////  Created by XiaoTian on 13-6-8.//  Copyright (c) 2013年 Ruita. All rights reserved.//#import "CustomTabView.h"#import <QuartzCore/QuartzCore.h>#import "CustomTabViewContentView.h"// 定义常量#define TOPTABVIEW_COLOR_TAB_TITLE [UIColor colorWithRed:1 green:1 blue:1 alpha:1] /*#FFFFFF*/#define TOPTABVIEW_COLOR_TAB_TITLE_SHADOW [UIColor colorWithRed:0 green:0 blue:0 alpha:0.5]/*#FFFFFF*/#define TOPTABVIEW_COLOR_TAB_TITLE_ACTIVE [UIColor colorWithRed:0.424 green:0.349 blue:0.239 alpha:1] /*#6C593d*/#define TOPTABVIEW_COLOR_TAB_TITLE_ACTIVE_SHADOW [UIColor colorWithRed:1 green:1 blue:1 alpha:0.55]/*#FFFFFF*/#define TOPTABVIEW_FONT_TAB_TITLE [UIFont fontWithName:@"HelveticaNeue-Bold" size:12.0f]#define TOPTABVIEW_FONT_TAB_TITLE_ACTIVE [UIFont fontWithName:@"HelveticaNeue-Bold" size:12.0f]#define OVERKILL 2048;@implementation CustomTabView// 关联属性@synthesize tabbedBar,shadowView,tabbedView,tabViews,leftCanc,rightCanc,buttonViews;@synthesize activeBarIndex,activeViewIndex,delegate;// 初始化UIView[调用]- (id)initWithFrame:(CGRect)frame{    self = [super initWithFrame:frame];    if (self) {        // Top Bar 导航栏[滚动条UIScrollView]选项卡按钮栏        tabbedBar = [[UIScrollView alloc] initWithFrame:self.bounds];                //[tabbedBar setBackgroundColor:[UIColor colorWithPatternImage:[UIImage imageNamed:@"ReportTopTabViewBarBG"]]]; // 导航栏背景        [tabbedBar setBackgroundColor:[UIColor whiteColor]];        [tabbedBar setAutoresizingMask:UIViewAutoresizingFlexibleWidth];        [tabbedBar setAlwaysBounceHorizontal:YES];        [tabbedBar setShowsVerticalScrollIndicator:NO];        [tabbedBar setShowsHorizontalScrollIndicator:NO];        CGRect rect = tabbedBar.frame;        rect.size.height = 33; // 高度30/宽度[屏幕宽]self.size.width        tabbedBar.frame = rect; // 设置位置        // 导航栏阴影        shadowView = [[UIView alloc] initWithFrame:rect];        [shadowView setAutoresizingMask:UIViewAutoresizingFlexibleWidth];                rect = shadowView.bounds;        rect.size.width = self.bounds.size.width ;        // rect.size.width = 1024;        UIBezierPath * shadowPath = [UIBezierPath bezierPathWithOvalInRect:rect]; // 贝塞尔曲线        shadowView.layer.shadowColor = [UIColor blackColor].CGColor;        shadowView.layer.shadowOffset = CGSizeMake(0.0f, 0.0f);        shadowView.layer.shadowOpacity = 0.5f;        shadowView.layer.shadowRadius = 6.0f;        shadowView.layer.shadowPath = shadowPath.CGPath;        // 选项卡内容视图        tabbedView = [[UIView alloc] initWithFrame:CGRectZero];        [tabbedView addSubview:[[UIView alloc] init]]; // 第0个视图        [tabbedView setBackgroundColor:[UIColor purpleColor]];        rect = self.bounds;        rect.size.height -= 33; // 高度-33 [导航栏33]        rect.origin.y += 33; // 下移33        tabbedView.frame = rect; // 内容的位置Frame                [tabbedView setAutoresizingMask:UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight];                        [self addSubview:shadowView]; // 添加选项卡栏的阴影: Z索引 0        [self addSubview:tabbedView];// 添加选项卡内容Content: Z索引 1        [self addSubview:tabbedBar];// 添加选项卡栏: Z索引 2                activeBarIndex = 0;    }    return self;}/* 方法 */#pragma mark - TopTabbedView method// 取得当前对象的tabViews数组-(NSMutableArray *) tabViews{    return _tabViews;}// [重写关联属性的方法]设置Tap View 视图组件,初始化所有的View 视图-(void) setTabViews:(NSMutableArray *) _views{    NSLog(@"setTabViews");    _tabViews = _views;        self.buttonViews = [[NSMutableArray alloc] init];        NSInteger index=0;    // 迭代内容View视图:添加Tab 和 content view 视图组件    for(CustomTabViewContentView *v in self.tabViews){        [v setFrame:tabbedView.bounds];        [v setIndex:index];        [v setAutoresizingMask:UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight];                CGSize size = [v.name sizeWithFont:[UIFont boldSystemFontOfSize:12]]; // 根据字符串按12号字体大小计算size        NSLog(@"Size: width=%f,height=%f",size.width,size.height);        CGFloat lastButtonViewMaxX = 0; // 按钮,X位置                if([buttonViews count])            lastButtonViewMaxX = CGRectGetMaxX([[buttonViews lastObject] frame]);        // 创建按钮,并添加到按钮栏        UIView *buttonView = [[UIView alloc] init];        // 设置按钮位置        if (index == 0) {            [buttonView setFrame:CGRectMake(lastButtonViewMaxX, 0, size.width+45, 28)];        }        else            [buttonView setFrame:CGRectMake(lastButtonViewMaxX+45, 0, size.width+45, 28)];        [tabbedBar addSubview:buttonView]; // 添加到TabBar 导航栏[UIView]        [buttonViews addObject:buttonView]; // 添加到TabBar 集合对象[UIView]        // 关闭小按钮//        TopTabViewButton *closeButton = [TopTabViewButton buttonWithType:UIButtonTypeRoundedRect];//        [closeButton setFrame:CGRectMake(0, 1, 28, 28)];//        [closeButton setTitle:@"X" forState:UIControlStateNormal];//        [closeButton setIndex:index];//        [closeButton addTarget:self action:@selector(closeButtonAtIndex:) forControlEvents:UIControlEventTouchDragInside];//        [buttonView addSubview:closeButton];        // 在Button View中添加组件[选项UIView]        UIButton * title = [UIButton buttonWithType:UIButtonTypeRoundedRect];        [title setTitle:v.name forState:UIControlStateNormal];        [title setTitle:@"Click" forState:UIControlStateHighlighted];        [title setFrame:CGRectMake(23, 5, size.width+16,20)]; //x,y,width,height//        [title.titleLabel setFont:TOPTABVIEW_FONT_TAB_TITLE_ACTIVE];//        [title setTitleColor:TOPTABVIEW_COLOR_TAB_TITLE_ACTIVE forState:UIControlStateNormal];//        [title setTitleShadowColor:TOPTABVIEW_COLOR_TAB_TITLE_ACTIVE_SHADOW forState:UIControlStateNormal];//        [title.titleLabel setShadowOffset:CGSizeMake(0, 1)];        [title addTarget:self action:@selector(selectButtonAtIndex:) forControlEvents:UIControlEventTouchUpInside];        [buttonView addSubview:title];//        //        TopTabViewButton * titleButton = [TopTabViewButton buttonWithType:UIButtonTypeRoundedRect];//        [titleButton setFrame:CGRectMake(23, 1, size.width+16, 28)];//        [titleButton setIndex:index];//        //        [titleButton.titleLabel setFont:TOPTABVIEW_FONT_TAB_TITLE_ACTIVE];//        [titleButton setTitleColor:TOPTABVIEW_COLOR_TAB_TITLE_ACTIVE forState:UIControlStateNormal];//        [titleButton setTitleShadowColor:TOPTABVIEW_COLOR_TAB_TITLE_ACTIVE_SHADOW forState:UIControlStateNormal];//        [titleButton.titleLabel setShadowOffset:CGSizeMake(0, 1)];//        //        [titleButton setTitle:v.name forState:UIControlStateNormal];//        [titleButton addTarget:self action:@selector(selectButtonAtIndex:) forControlEvents:UIControlEventTouchDragInside];        index++;                size = tabbedBar.contentSize;        size.width = CGRectGetMaxX(buttonView.frame);        tabbedBar.contentSize = size;    }    UIButton * button = [UIButton buttonWithType:UIButtonTypeRoundedRect];    button.frame = CGRectMake(10,10,70,40);    [button setTitle:@"点击" forState:UIControlStateNormal];    [button addTarget:self action:@selector(selectButtonAtIndex:) forControlEvents:UIControlEventTouchUpInside];    [tabbedView insertSubview:button atIndex:1];//    // 左边小图片//    leftCanc = [[UIImageView alloc] initWithImage:[[UIImage imageNamed:@"filetab-gradient-left"] stretchableImageWithLeftCapWidth:-44 topCapHeight:0]];//    CGRect rect = leftCanc.frame;//    rect.size.width = 45;//    rect.origin.x = -45;//    leftCanc.frame = rect;//    [tabbedBar insertSubview:rightCanc atIndex:0]; // 插入把Bar中//    // 右边小图片//    rightCanc = [[UIImageView alloc] initWithImage:[[UIImage imageNamed:@"filetab-gradient-right"] stretchableImageWithLeftCapWidth:44 topCapHeight:0]];//    //    rect = rightCanc.frame;//    rect.origin.x = 45;//    rightCanc.frame = rect;    //    [rightCanc setAutoresizingMask:UIViewAutoresizingFlexibleWidth];//    [tabbedBar insertSubview:rightCanc atIndex:0]; // 插入把Bar中    }// 接口定义方法// 根据BarIndex显示页面Tab 栏的按钮[改变状态显示]-(void) setActiveBarIndex:(NSInteger) _activeBarIndex{    NSLog(@"setActiveBarIndex");    activeBarIndex = _activeBarIndex;//    UIView *buttonView = (UIView *) [buttonViews objectAtIndex:activeBarIndex]; // 取得选中的对象//    //    // 清空所有状态[清空选中状态]//    for(UIView *view in buttonViews){//        UIButton *closeButton = [[view subviews] objectAtIndex:0];//        [closeButton setTitle:@"x" forState:UIControlStateNormal];//        [closeButton setTitle:@"X" forState:UIControlStateHighlighted];//        //        UIButton *titleButton = [[view subviews] objectAtIndex:1];//        [titleButton setTitleColor:TOPTABVIEW_COLOR_TAB_TITLE forState:UIControlStateNormal];//        [titleButton setTitleShadowColor:TOPTABVIEW_COLOR_TAB_TITLE_SHADOW forState:UIControlStateNormal];//    }//    // 设置状态[设置选中状态]//    UIButton *closeButton = [[buttonView subviews] objectAtIndex:0];//    [closeButton setTitle:@"X" forState:UIControlStateNormal];//    [closeButton setTitle:@"x" forState:UIControlStateHighlighted];//    // 只有一个Tab,不能再关闭了,隐藏x按钮//    if ([buttonViews count] == 1)//        [closeButton setHidden:YES];}// 根据ViewIndex显示页面Tab-(void) setActiveViewIndex:(NSInteger)_actionViewIndex{    NSLog(@"setActiveViewIndex");}// 事件 Action#pragma mark - TopTabbedView actions-(void) closeButtonAtIndex:(id) sender{    NSLog(@"closeButtonAtIndex");}// Title 点击事件-(void) selectButtonAtIndex:(id) sender{    NSLog(@"selectButtonAtIndex");}-(CustomTabView *) actionTabView{    NSLog(@"CustomTabView");    return self;}@end